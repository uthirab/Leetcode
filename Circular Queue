class MyCircularQueue:

    def __init__(self, k):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        :type k: int
        """
        self.queue=list()
        self.front=0
        self.rear=0
        self.maxsize=k
        
    def enQueue(self, value):
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        :type value: int
        :rtype: bool
        """
        #newnode=Node(value)
        if len(self.queue)<self.maxsize:
            if len(self.queue) == 0:
                self.front= value
                self.rear = value
            self.rear= (self.rear+1)%self.maxsize
            self.queue.append(value)
            return True
        else:
            return False
    def deQueue(self):
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        :rtype: bool
        """
        if len(self.queue)>0:
            self.queue.pop()
            self.front=(self.front+1)%self.maxsize
            return True
        else:
            return False
        
    def Front(self):
        """
        Get the front item from the queue.
        :rtype: int
        """
        if  len(self.queue) ==0:
            return -1
        else:
            return self.queue[self.front]
        

    def Rear(self):
        """
        Get the last item from the queue.
        :rtype: int
        """
        if len(self.queue)> 0:
            return self.queue[self.rear]        
        else:
            return self.rear
    def isEmpty(self):
        """
        Checks whether the circular queue is empty or not.
        :rtype: bool
        """
        if len(self.queue)==0:
            
            return True
        else:
            return False
            

    def isFull(self):
        """
        Checks whether the circular queue is full or not.
        :rtype: bool
        """
        if len(self.queue) ==self.maxsize:
            return True
        else:
            return False


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
