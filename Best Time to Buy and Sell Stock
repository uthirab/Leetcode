#1 Buy only once
prices = [7, 1, 5, 3, 6, 8]
buying_price = prices[0]
profit = 0
for i in range(0, len(prices)):
    if prices[i] > buying_price:
        profit = (max(profit, prices[i] - buying_price))
    else:
        buying_price = prices[i]
print(profit)

#2 buy many number of times
class Solution(object):
    def maxProfit(self, prices, fee):
        if len(prices) < 2:
            print(0)
        i, j = -prices[0] - fee, 0
        for price in prices[1:]:
            i = max(i, j - price - fee)
            j = max(j, i + price)
        return(j)

        
 #3 my long time 
 class Solution(object):
    def maxProfit(self, prices, fee):
        buying_price = prices[0]
        profit1, buying_price2 = 0, 0
        profit2, maxprofit=0,0

        for i in range(0, len(prices)):
            if prices[i] > buying_price and buying_price2 < 1:
                profit1 = (max(profit1, prices[i] - buying_price - fee))
                if i + 2 >= len(prices)and i+1<len(prices):
                    profit1 = (max(profit1, prices[i + 1] - buying_price - fee))
                if profit1>=2:
                    maxprofit = profit1 + profit2 + maxprofit
                if profit1 >= 2 and i+1<len(prices):
                    buying_price2 = prices[i + 1]
                    profit1 = 0
            elif buying_price2 < 1:
                    buying_price = prices[i]
            elif prices[i] > buying_price2:
                    profit2 = (max(profit2, prices[i] - buying_price2 - fee))
                    if i + 2 >= len(prices) and i+1<len(prices):
                        profit2 = (max(profit2, prices[i+1] - buying_price2 - fee))
                    if profit2 >= 2:
                        maxprofit = profit1 + profit2 + maxprofit
                    if profit2 >= 2 and (i+1)<len(prices):
                        buying_price = prices[i+1]
                        buying_price2=0
                        profit2 = 0
            else:
                buying_price2 = prices[i]
                profit1 = 0
        return (maxprofit)
        
