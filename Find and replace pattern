class Solution:
    def findAndReplacePattern(self, words, pattern):
        word=[[] for i in range(len(words))]
        
        for i in range(len(words)):
            c=[]
            for j in range(len(words[i])):
                if words[i][j] in c:
                    word[i].append(c.index(words[i][j]))
                else:
                    c.append(words[i][j])
                    
                    word[i].append(c.index(words[i][j]))
        c,p,g=[],[],[]
        for i in range(len(pattern)):
            if pattern[i]in c:
                p.append(c.index(pattern[i]))
            else:
                c.append(pattern[i])   
                p.append(c.index(pattern[i]))
        for i in range(len(word)):
            if word[i]==p:
                g.append(words[i])
        # print(g)
        return(g)
            
'''You have a list of words and a pattern, and you want to know which words in words matches the pattern.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)

Return a list of the words in words that match the given pattern. 

You may return the answer in any order.

 

Example 1:

Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
since a and b map to the same letter.
 

Note:

1 <= words.length <= 50
1 <= pattern.length = words[i].length <= 20
'''
            
        
